# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: Next.js build & copy to remote

on:
  push:
    branches: [main]

concurrency:
  group: main-build-${{ github.ref }}-1
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - name: next.js build cache
        uses: actions/cache@v3
        with:
          path: ${{ github.workspace }}/.next/cache
          # Generate a new cache whenever packages or source files change.
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/yarn.lock') }}-${{ hashFiles('**.[jt]s', '**.[jt]sx') }}
          # If source files changed but packages didn't, rebuild from a prior cache.
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/yarn.lock') }}-
      - name: setup nodejs and yarn (with cache)
        uses: actions/setup-node@v3
        with:
          node-version: "18"
          cache: "yarn"
      - name: install yarn dependencies
        run: yarn install --frozen-lockfile
      - name: build nextjs app
        run: yarn build
      - name: copy file via ssh password
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          password: ${{ secrets.PASSWORD }}
          source: "next.config.js,package.json,yarn.lock,.next,node_modules,public"
          target: "~/ci"
      - name: restart remote next.js server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          password: ${{ secrets.PASSWORD }}
          script: sudo systemctl restart website
